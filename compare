#!/usr/bin/env ruby

require 'digest/sha1'

INFILE = ARGV[0] or begin
  puts "Must specify input file"
  exit 1
end

SCRIPTS = [
  './bin/haskell/munge < {in}',
  './bin/c/munge < {in}',
  'ruby src/ruby/munge.rb < {in}'
]

VARIANTS = {
  'single' => 'time {script} | pv > {out}',
  'parallel' => 'time parallel --keep-order --pipe {script} | pv > {out}'
}

def expand_variants(variants, scripts)
  scripts.map do |script|
    variants.map do |name, template|
      template.gsub '{script}', script
    end
  end.flatten
end

def run(cmd)
  puts cmd
  system cmd
end

def parse_template(template, in_file, out_file)
  template.gsub('{in}', in_file).gsub('{out}', out_file)
end

def compare_output_files(outfiles)
  md5s = outfiles.map do |outfile|
    md5 = `md5 -q #{outfile}`.chomp
    puts "#{md5} - #{outfile}"
    md5
  end

  if md5s.uniq.size == 1
    puts "All the same!"
  else
    puts "ERROR: Some output files differ"
  end
end

def script_id(script)
  Digest::SHA1.hexdigest(script)
end

def setup_output_file(script, in_file)
  out_dir = File.join 'output', script_id(script)
  out_file = File.join out_dir, File.basename(in_file)
  `mkdir -p #{out_dir}`
  File.open(File.join(out_dir, 'script.txt'), 'w') {|f| f.write script}
  out_file
end

def run_benchmarks(scripts, variants, in_file)
  out_files = []
  expand_variants(variants, scripts).each do |template|
    out_files << out_file = setup_output_file(template, in_file)    
    script = template.gsub('{in}', in_file).gsub('{out}', out_file)    
    puts "Running benchmarks for script: #{script}"
    run script
    puts "-" * 100
  end
  
  puts "Comparing output files..."
  compare_output_files(out_files)
end

run_benchmarks(SCRIPTS, VARIANTS, INFILE)